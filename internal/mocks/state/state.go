// Code generated by MockGen. DO NOT EDIT.
// Source: sigsum.org/log-go/internal/state (interfaces: StateManager)

// Package state is a generated GoMock package.
package state

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	witness "sigsum.org/log-go/internal/witness"
	types "sigsum.org/sigsum-go/pkg/types"
)

// MockStateManager is a mock of StateManager interface.
type MockStateManager struct {
	ctrl     *gomock.Controller
	recorder *MockStateManagerMockRecorder
}

// MockStateManagerMockRecorder is the mock recorder for MockStateManager.
type MockStateManagerMockRecorder struct {
	mock *MockStateManager
}

// NewMockStateManager creates a new mock instance.
func NewMockStateManager(ctrl *gomock.Controller) *MockStateManager {
	mock := &MockStateManager{ctrl: ctrl}
	mock.recorder = &MockStateManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStateManager) EXPECT() *MockStateManagerMockRecorder {
	return m.recorder
}

<<<<<<< HEAD
// Run mocks base method.
func (m *MockStateManager) Run(arg0 context.Context, arg1 time.Duration) {
=======
// CosignedTreeHead mocks base method.
func (m *MockStateManager) CosignedTreeHead() types.CosignedTreeHead {
>>>>>>> d52c2fc (wip wire up in state manager)
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Run", arg0, arg1)
}

// Run indicates an expected call of Run.
func (mr *MockStateManagerMockRecorder) Run(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockStateManager)(nil).Run), arg0, arg1)
}

// SignedTreeHead mocks base method.
func (m *MockStateManager) SignedTreeHead() types.SignedTreeHead {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignedTreeHead")
	ret0, _ := ret[0].(types.SignedTreeHead)
	return ret0
}

// SignedTreeHead indicates an expected call of SignedTreeHead.
func (mr *MockStateManagerMockRecorder) SignedTreeHead() *gomock.Call {
	mr.mock.ctrl.T.Helper()
<<<<<<< HEAD
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignedTreeHead", reflect.TypeOf((*MockStateManager)(nil).SignedTreeHead))
=======
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NextTreeHead", reflect.TypeOf((*MockStateManager)(nil).NextTreeHead))
}

// Run mocks base method.
func (m *MockStateManager) Run(arg0 context.Context, arg1 []witness.WitnessConfig, arg2 time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Run", arg0, arg1, arg2)
}

// Run indicates an expected call of Run.
func (mr *MockStateManagerMockRecorder) Run(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockStateManager)(nil).Run), arg0, arg1, arg2)
>>>>>>> d52c2fc (wip wire up in state manager)
}
